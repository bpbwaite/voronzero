#####################################################################
#   Printer Macros
#####################################################################

[gcode_macro FORCE_ALLOW_MOVE]
gcode:
    { action_respond_info("Be Careful!") }
    SET_KINEMATIC_POSITION X=60 Y=60 Z=60

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro PREHEAT_CHAMBER]
description: warm the chamber to a target
gcode:
  # { jinja_env = Environment(extensions=['jinja2.ext.loopcontrols']) } ; if only
  # parameters:
  {% set BED_TEMP = params.BED|default(95)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(220)|float %}
  {% set CHAMBER_TARGET = params.CHAMBER|default(40)|float %}
  
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_TEMP}
  SET_FAN_SPEED FAN=_nevermore SPEED=1.0
  M106 S255 ; print fans
  LEDS_ON
  ; hardcoded loop
  {% if printer.toolhead.homed_axes != "xyz" %} # maybe replace with if z not in printer homed axes
    G28
  {% endif %}
  G1 X60 Y60 Z60 F3000 ; center the hotend
  {% for _ in range(1, 10) %} ; maximum number of loops before halting
    {% if printer['htu21d chamber'].temperature < CHAMBER_TARGET %}
      G0 Z10 F700
      G0 Z110 F700
    {% endif %} ; pseudobreak
  {% endfor %}
  G1 Z60 F700 ; center the hotend

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
  # parameters:
  {% set BED_TEMP = params.BED|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
  {% set svv = printer.save_variables.variables %}

  SET_SKEW CLEAR=1
  LEDS_OFF
  # Start heating
  M140 S{BED_TEMP}
  M104 S{EXTRUDER_TEMP}
  G28                            ; home all axes
  G1 Z20 F3000                   ; move nozzle away from bed
  
  M106 S255 ; warm up the sleeves in the print fans
  
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  M107

  CLEAN_NOZZLE
  _SET_Z_OFFSET

  G1 X2.0 Y20 Z0.3 F5000.0        # Move to start position
  G1 X2.0 Y100.0 Z0.3 F750.0 E15 # Draw the first line
  G1 X2.4 Y100.0 Z0.3 F5000.0     # Move to side a little
  G1 X2.4 Y20 Z0.3 F500.0 E20    # Draw the second line; modified for short length
  G92 E0 ; Reset Extruder
  G1 Z2.0 F3000                   # Move Z Axis up little to prevent scratching of Heat Bed
  G1 X5 Y20 Z0.3 F5000.0          # Move over to prevent blob squish
  
  LEDS_ON
  #SET_SKEW XY=70.6,70.4,49.8 XZ=70.1,70.6,49.9 YZ=70.1,70.6,49.8

  M221 S93 # set extrusion multiplier to calibrated value

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear

    G92 E0                         ; zero the extruder
    G1 E-5.0 F3600                 ; retract filament

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% set min_y = 2 %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    G91                            ; relative positioning
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F10000  ; remove stringing

    TURN_OFF_HEATERS
    LEDS_OFF
    SET_SKEW CLEAR=1
    M107                           ; turn off fan
    SET_FAN_SPEED FAN=_nevermore SPEED=0.0 ; turn off nevermore fan
    
    G90                            ; absolute positioning
    G0 X60 Y119 F3600          ; park nozzle at rear
    G0 Z{max_z-2} F3600
    M84
    {action_respond_info('Remember to save Z-offset if you made changes!')}
    

[gcode_macro LOAD_FILAMENT]
gcode:
  {% set svv = printer.save_variables.variables %}
    {% if printer.extruder.can_extrude == False %}
      {action_respond_info('Preheat the nozzle first!')}
    {% else %}
      {% if printer.toolhead.homed_axes != "xyz" %}
        G28
      {% endif %}
      G1 X60 Y30 F3000 ; good position to reduce bowden strain and load more easily
      M83                            ; set extruder to relative
      {% if printer.toolhead.position.z < 20.0 %}
        G1 Z25 ; make sure bed is not too close
      {% endif %}
      G1 E30 F600                    ; pull filament through quickly
      G1 E20 F150                    ; prime nozzle with filament
      M82                            ; set extruder to absolute
    {% endif %}
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if printer.extruder.can_extrude == False %}
    {action_respond_info('Preheat the nozzle first!')}
  {% else %}
  M83                            ; set extruder to relative
  G1 E10 F300                    ; extrude a little to soften tip
  G1 E-50 F300                  ; retract filament from nozzle
  M82                            ; set extruder to absolute
  {% endif %}

[gcode_macro HEAT_AND_UNLOAD]
gcode:
  {% if printer.extruder.can_extrude == False %}
    M104 S200
    M109 S200
  {% endif %}
  UNLOAD_FILAMENT

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro CLEAN_NOZZLE]
description: Have the servo brush the nozzle and sock
gcode:
  SAVE_GCODE_STATE
  M106 S255
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G90
  G1 X1 Z105 F5000
  SET_SERVO SERVO=brush_servo ANGLE=115            ; set brush servo to up position
  G1 Y60 F3600                                    ; toolhead moves back and fourth across the brush
  SET_SERVO SERVO=brush_servo ANGLE=120            ; push the brush into the nozzle extra hard
  G1 X2.5 F3600
  G1 Y110 F6000                                   ; speed increase
  G1 X5 F6000                                     
  G1 Y60 F6000                                    
  G1 X7.5 F6000
  G1 Y110 F6000                                  ; speed decrease
  G1 X10 F3600
  SET_SERVO SERVO=brush_servo ANGLE=115; set brush servo to up position
  G1 Y60 F3600
  SET_SERVO SERVO=brush_servo ANGLE=5             ; set brush servo to down position
  M107
  ;RESTORE_GCODE_STATE MOVE=1 MOVE_SPEED=5000      ; return to starting position

[gcode_macro TOGGLE_AIR_FILTER]
description: Enable or disable the Nevermore cartridge fan
gcode:
  {% if printer["fan_generic _nevermore"].speed > 0.0 %}
  SET_FAN_SPEED FAN=_nevermore SPEED=0.0
  {action_respond_info("Nevermore fan now off")}
  {% else %}
  SET_FAN_SPEED FAN=_nevermore SPEED=1.0
  {action_respond_info("Nevermore fan now on")}
  {% endif %}

[gcode_macro LEDS_ON]
gcode:
  SET_PIN PIN=illumination VALUE=1

[gcode_macro LEDS_OFF]
gcode:
  SET_PIN PIN=illumination VALUE=0

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro SHOW_OFF_SPEED]
gcode:
  LEDS_ON
  TEST_SPEED SPEED=300 ACCEL=4000 BOUND=10 SMALLPATTERNSIZE=20 ITERATIONS=2